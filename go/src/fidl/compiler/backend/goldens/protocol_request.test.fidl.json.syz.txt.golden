# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

include <test/name/c/fidl.h>



resource zx_chan_test_name_Child_client[zx_chan]
resource zx_chan_test_name_Child_server[zx_chan]

zx_channel_create$test_name_Child(options const[0], out0 ptr[out, zx_chan_test_name_Child_client], out1 ptr[out, zx_chan_test_name_Child_server])
fdio_service_connect$test_name_Child(path ptr[in, string["/svc/"]], handle zx_chan_test_name_Child_server)


test_name_ParentGetChildRequest {
       hdr fidl_message_header[915586153]
} [packed]
test_name_ParentGetChildRequestHandles {
       void void
} [packed]
test_name_ParentGetChildResponse {
       hdr fidl_message_header[915586153]
       c flags[fidl_handle_presence, int32]
} [packed]
test_name_ParentGetChildResponseHandles {
       c zx_chan_test_name_Child_client
} [packed]
test_name_ParentGetChildRequestRequest {
       hdr fidl_message_header[1068158078]
} [packed]
test_name_ParentGetChildRequestRequestHandles {
       void void
} [packed]
test_name_ParentGetChildRequestResponse {
       hdr fidl_message_header[1068158078]
       r flags[fidl_handle_presence, int32]
} [packed]
test_name_ParentGetChildRequestResponseHandles {
       r zx_chan_test_name_Child_server
} [packed]
test_name_ParentTakeChildRequest {
       hdr fidl_message_header[1275478777]
       c flags[fidl_handle_presence, int32]
} [packed]
test_name_ParentTakeChildRequestHandles {
       c zx_chan_test_name_Child_client
} [packed]
test_name_ParentTakeChildRequestRequest {
       hdr fidl_message_header[1589872250]
       r flags[fidl_handle_presence, int32]
} [packed]
test_name_ParentTakeChildRequestRequestHandles {
       r zx_chan_test_name_Child_server
} [packed]

resource zx_chan_test_name_Parent_client[zx_chan]
resource zx_chan_test_name_Parent_server[zx_chan]

zx_channel_create$test_name_Parent(options const[0], out0 ptr[out, zx_chan_test_name_Parent_client], out1 ptr[out, zx_chan_test_name_Parent_server])
fdio_service_connect$test_name_Parent(path ptr[in, string["/svc/"]], handle zx_chan_test_name_Parent_server)
zx_channel_call$test_name_ParentGetChild(handle zx_chan_test_name_Parent_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_ParentGetChildRequest, test_name_ParentGetChildRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_ParentGetChildResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_name_ParentGetChildRequest(handle zx_chan_test_name_Parent_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_ParentGetChildRequestRequest, test_name_ParentGetChildRequestRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_ParentGetChildRequestResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$test_name_ParentTakeChild(handle zx_chan_test_name_Parent_client, options const[0], bytes ptr[in, test_name_ParentTakeChildRequest], num_bytes bytesize[bytes], handles ptr[in, test_name_ParentTakeChildRequestHandles], num_handles bytesize[handles])
zx_channel_write$test_name_ParentTakeChildRequest(handle zx_chan_test_name_Parent_client, options const[0], bytes ptr[in, test_name_ParentTakeChildRequestRequest], num_bytes bytesize[bytes], handles ptr[in, test_name_ParentTakeChildRequestRequestHandles], num_handles bytesize[handles])

