// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.protocol.names.lower;
protocol abstract { JustOneMethod(); };
protocol alignas { JustOneMethod(); };
protocol alignof { JustOneMethod(); };
protocol and { JustOneMethod(); };
protocol and_eq { JustOneMethod(); };
protocol as { JustOneMethod(); };
protocol asm { JustOneMethod(); };
protocol assert { JustOneMethod(); };
protocol async { JustOneMethod(); };
protocol atomic_cancel { JustOneMethod(); };
protocol atomic_commit { JustOneMethod(); };
protocol atomic_noexcept { JustOneMethod(); };
protocol auto { JustOneMethod(); };
protocol await { JustOneMethod(); };
protocol become { JustOneMethod(); };
protocol bitand { JustOneMethod(); };
protocol bitor { JustOneMethod(); };
protocol bool { JustOneMethod(); };
protocol box { JustOneMethod(); };
protocol break { JustOneMethod(); };
protocol byte { JustOneMethod(); };
protocol case { JustOneMethod(); };
protocol catch { JustOneMethod(); };
protocol chan { JustOneMethod(); };
protocol char { JustOneMethod(); };
protocol char16_t { JustOneMethod(); };
protocol char32_t { JustOneMethod(); };
protocol class { JustOneMethod(); };
protocol co_await { JustOneMethod(); };
protocol co_return { JustOneMethod(); };
protocol co_yield { JustOneMethod(); };
protocol coding_traits { JustOneMethod(); };
protocol compl { JustOneMethod(); };
protocol concept { JustOneMethod(); };
protocol const { JustOneMethod(); };
protocol const_cast { JustOneMethod(); };
protocol constexpr { JustOneMethod(); };
protocol continue { JustOneMethod(); };
protocol controller { JustOneMethod(); };
protocol covariant { JustOneMethod(); };
protocol crate { JustOneMethod(); };
protocol decltype { JustOneMethod(); };
protocol decoder { JustOneMethod(); };
protocol default { JustOneMethod(); };
protocol defer { JustOneMethod(); };
protocol deferred { JustOneMethod(); };
protocol delete { JustOneMethod(); };
protocol do { JustOneMethod(); };
protocol double { JustOneMethod(); };
protocol dynamic { JustOneMethod(); };
protocol dynamic_cast { JustOneMethod(); };
protocol else { JustOneMethod(); };
protocol encoder { JustOneMethod(); };
protocol ensure_values_instantiated { JustOneMethod(); };
protocol enum { JustOneMethod(); };
protocol err { JustOneMethod(); };
protocol explicit { JustOneMethod(); };
protocol export { JustOneMethod(); };
protocol extends { JustOneMethod(); };
protocol extern { JustOneMethod(); };
protocol external { JustOneMethod(); };
protocol factory { JustOneMethod(); };
protocol fallthrough { JustOneMethod(); };
protocol false { JustOneMethod(); };
protocol fidl { JustOneMethod(); };
protocol fidl_type { JustOneMethod(); };
protocol final { JustOneMethod(); };
protocol finally { JustOneMethod(); };
protocol float { JustOneMethod(); };
protocol fn { JustOneMethod(); };
protocol for { JustOneMethod(); };
protocol friend { JustOneMethod(); };
protocol func { JustOneMethod(); };
protocol future { JustOneMethod(); };
protocol futures { JustOneMethod(); };
protocol get { JustOneMethod(); };
protocol go { JustOneMethod(); };
protocol goto { JustOneMethod(); };
protocol has_invalid_tag { JustOneMethod(); };
protocol hash_code { JustOneMethod(); };
protocol if { JustOneMethod(); };
protocol impl { JustOneMethod(); };
protocol implements { JustOneMethod(); };
protocol import { JustOneMethod(); };
protocol in { JustOneMethod(); };
protocol index { JustOneMethod(); };
protocol inline { JustOneMethod(); };
protocol int { JustOneMethod(); };
protocol int16 { JustOneMethod(); };
protocol int32 { JustOneMethod(); };
protocol int64 { JustOneMethod(); };
protocol int8 { JustOneMethod(); };
protocol interface { JustOneMethod(); };
protocol is { JustOneMethod(); };
protocol let { JustOneMethod(); };
protocol lhs { JustOneMethod(); };
protocol library { JustOneMethod(); };
protocol list { JustOneMethod(); };
protocol long { JustOneMethod(); };
protocol loop { JustOneMethod(); };
protocol macro { JustOneMethod(); };
protocol map { JustOneMethod(); };
protocol match { JustOneMethod(); };
protocol mixin { JustOneMethod(); };
protocol mod { JustOneMethod(); };
protocol module { JustOneMethod(); };
protocol move { JustOneMethod(); };
protocol mut { JustOneMethod(); };
protocol mutable { JustOneMethod(); };
protocol namespace { JustOneMethod(); };
protocol never { JustOneMethod(); };
protocol new { JustOneMethod(); };
protocol no_such_method { JustOneMethod(); };
protocol noexcept { JustOneMethod(); };
protocol none { JustOneMethod(); };
protocol not { JustOneMethod(); };
protocol not_eq { JustOneMethod(); };
protocol null { JustOneMethod(); };
protocol nullptr { JustOneMethod(); };
protocol num { JustOneMethod(); };
protocol object { JustOneMethod(); };
protocol offset { JustOneMethod(); };
protocol offsetof { JustOneMethod(); };
protocol ok { JustOneMethod(); };
protocol on_open { JustOneMethod(); };
protocol operator { JustOneMethod(); };
protocol option { JustOneMethod(); };
protocol or { JustOneMethod(); };
protocol or_eq { JustOneMethod(); };
protocol override { JustOneMethod(); };
protocol package { JustOneMethod(); };
protocol part { JustOneMethod(); };
protocol priv { JustOneMethod(); };
protocol private { JustOneMethod(); };
protocol proc { JustOneMethod(); };
protocol protected { JustOneMethod(); };
protocol proxy { JustOneMethod(); };
protocol pub { JustOneMethod(); };
protocol public { JustOneMethod(); };
protocol pure { JustOneMethod(); };
protocol range { JustOneMethod(); };
protocol ref { JustOneMethod(); };
protocol register { JustOneMethod(); };
protocol reinterpret_cast { JustOneMethod(); };
protocol requires { JustOneMethod(); };
protocol result { JustOneMethod(); };
protocol rethrow { JustOneMethod(); };
protocol return { JustOneMethod(); };
protocol rhs { JustOneMethod(); };
protocol rune { JustOneMethod(); };
protocol runtime_type { JustOneMethod(); };
protocol select { JustOneMethod(); };
protocol self { JustOneMethod(); };
protocol send { JustOneMethod(); };
protocol set { JustOneMethod(); };
protocol set_controller { JustOneMethod(); };
protocol short { JustOneMethod(); };
protocol signed { JustOneMethod(); };
protocol sizeof { JustOneMethod(); };
protocol some { JustOneMethod(); };
protocol static { JustOneMethod(); };
protocol static_assert { JustOneMethod(); };
protocol static_cast { JustOneMethod(); };
protocol stream { JustOneMethod(); };
protocol string { JustOneMethod(); };
protocol struct { JustOneMethod(); };
protocol stub { JustOneMethod(); };
protocol super { JustOneMethod(); };
protocol switch { JustOneMethod(); };
protocol synchronized { JustOneMethod(); };
protocol template { JustOneMethod(); };
protocol this { JustOneMethod(); };
protocol thread_local { JustOneMethod(); };
protocol throw { JustOneMethod(); };
protocol to_string { JustOneMethod(); };
protocol trait { JustOneMethod(); };
protocol true { JustOneMethod(); };
protocol try { JustOneMethod(); };
protocol type { JustOneMethod(); };
protocol typedef { JustOneMethod(); };
protocol typeid { JustOneMethod(); };
protocol typename { JustOneMethod(); };
protocol typeof { JustOneMethod(); };
protocol uint16 { JustOneMethod(); };
protocol uint32 { JustOneMethod(); };
protocol uint64 { JustOneMethod(); };
protocol uint8 { JustOneMethod(); };
protocol union { JustOneMethod(); };
protocol unsafe { JustOneMethod(); };
protocol unsigned { JustOneMethod(); };
protocol unsized { JustOneMethod(); };
protocol use { JustOneMethod(); };
protocol using { JustOneMethod(); };
protocol value { JustOneMethod(); };
protocol value_of { JustOneMethod(); };
protocol value_union { JustOneMethod(); };
protocol values_map { JustOneMethod(); };
protocol var { JustOneMethod(); };
protocol vec { JustOneMethod(); };
protocol virtual { JustOneMethod(); };
protocol void { JustOneMethod(); };
protocol volatile { JustOneMethod(); };
protocol wchar_t { JustOneMethod(); };
protocol where { JustOneMethod(); };
protocol which { JustOneMethod(); };
protocol while { JustOneMethod(); };
protocol with { JustOneMethod(); };
protocol xor { JustOneMethod(); };
protocol xor_eq { JustOneMethod(); };
protocol xunion { JustOneMethod(); };
protocol yield { JustOneMethod(); };
protocol zx { JustOneMethod(); };
