// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.protocol.names.camel;
protocol Abstract { JustOneMethod(); };
protocol Alignas { JustOneMethod(); };
protocol Alignof { JustOneMethod(); };
protocol And { JustOneMethod(); };
protocol AndEq { JustOneMethod(); };
protocol As { JustOneMethod(); };
protocol Asm { JustOneMethod(); };
protocol Assert { JustOneMethod(); };
protocol Async { JustOneMethod(); };
protocol AtomicCancel { JustOneMethod(); };
protocol AtomicCommit { JustOneMethod(); };
protocol AtomicNoexcept { JustOneMethod(); };
protocol Auto { JustOneMethod(); };
protocol Await { JustOneMethod(); };
protocol Become { JustOneMethod(); };
protocol Bitand { JustOneMethod(); };
protocol Bitor { JustOneMethod(); };
protocol Bool { JustOneMethod(); };
protocol Box { JustOneMethod(); };
protocol Break { JustOneMethod(); };
protocol Byte { JustOneMethod(); };
protocol Case { JustOneMethod(); };
protocol Catch { JustOneMethod(); };
protocol Chan { JustOneMethod(); };
protocol Char { JustOneMethod(); };
protocol Char16T { JustOneMethod(); };
protocol Char32T { JustOneMethod(); };
protocol Class { JustOneMethod(); };
protocol CoAwait { JustOneMethod(); };
protocol CoReturn { JustOneMethod(); };
protocol CoYield { JustOneMethod(); };
protocol CodingTraits { JustOneMethod(); };
protocol Compl { JustOneMethod(); };
protocol Concept { JustOneMethod(); };
protocol Const { JustOneMethod(); };
protocol ConstCast { JustOneMethod(); };
protocol Constexpr { JustOneMethod(); };
protocol Continue { JustOneMethod(); };
protocol Controller { JustOneMethod(); };
protocol Covariant { JustOneMethod(); };
protocol Crate { JustOneMethod(); };
protocol Decltype { JustOneMethod(); };
protocol Decoder { JustOneMethod(); };
protocol Default { JustOneMethod(); };
protocol Defer { JustOneMethod(); };
protocol Deferred { JustOneMethod(); };
protocol Delete { JustOneMethod(); };
protocol Do { JustOneMethod(); };
protocol Double { JustOneMethod(); };
protocol Dynamic { JustOneMethod(); };
protocol DynamicCast { JustOneMethod(); };
protocol Else { JustOneMethod(); };
protocol Encoder { JustOneMethod(); };
protocol EnsureValuesInstantiated { JustOneMethod(); };
protocol Enum { JustOneMethod(); };
protocol Err { JustOneMethod(); };
protocol Explicit { JustOneMethod(); };
protocol Export { JustOneMethod(); };
protocol Extends { JustOneMethod(); };
protocol Extern { JustOneMethod(); };
protocol External { JustOneMethod(); };
protocol Factory { JustOneMethod(); };
protocol Fallthrough { JustOneMethod(); };
protocol False { JustOneMethod(); };
protocol Fidl { JustOneMethod(); };
protocol FidlType { JustOneMethod(); };
protocol Final { JustOneMethod(); };
protocol Finally { JustOneMethod(); };
protocol Float { JustOneMethod(); };
protocol Fn { JustOneMethod(); };
protocol For { JustOneMethod(); };
protocol Friend { JustOneMethod(); };
protocol Func { JustOneMethod(); };
protocol Future { JustOneMethod(); };
protocol Futures { JustOneMethod(); };
protocol Get { JustOneMethod(); };
protocol Go { JustOneMethod(); };
protocol Goto { JustOneMethod(); };
protocol HasInvalidTag { JustOneMethod(); };
protocol HashCode { JustOneMethod(); };
protocol If { JustOneMethod(); };
protocol Impl { JustOneMethod(); };
protocol Implements { JustOneMethod(); };
protocol Import { JustOneMethod(); };
protocol In { JustOneMethod(); };
protocol Index { JustOneMethod(); };
protocol Inline { JustOneMethod(); };
protocol Int { JustOneMethod(); };
protocol Int16 { JustOneMethod(); };
protocol Int32 { JustOneMethod(); };
protocol Int64 { JustOneMethod(); };
protocol Int8 { JustOneMethod(); };
protocol Interface { JustOneMethod(); };
protocol Is { JustOneMethod(); };
protocol Let { JustOneMethod(); };
protocol Lhs { JustOneMethod(); };
protocol Library { JustOneMethod(); };
protocol List { JustOneMethod(); };
protocol Long { JustOneMethod(); };
protocol Loop { JustOneMethod(); };
protocol Macro { JustOneMethod(); };
protocol Map { JustOneMethod(); };
protocol Match { JustOneMethod(); };
protocol Mixin { JustOneMethod(); };
protocol Mod { JustOneMethod(); };
protocol Module { JustOneMethod(); };
protocol Move { JustOneMethod(); };
protocol Mut { JustOneMethod(); };
protocol Mutable { JustOneMethod(); };
protocol Namespace { JustOneMethod(); };
protocol Never { JustOneMethod(); };
protocol New { JustOneMethod(); };
protocol NoSuchMethod { JustOneMethod(); };
protocol Noexcept { JustOneMethod(); };
protocol None { JustOneMethod(); };
protocol Not { JustOneMethod(); };
protocol NotEq { JustOneMethod(); };
protocol Null { JustOneMethod(); };
protocol Nullptr { JustOneMethod(); };
protocol Num { JustOneMethod(); };
protocol Object { JustOneMethod(); };
protocol Offset { JustOneMethod(); };
protocol Offsetof { JustOneMethod(); };
protocol Ok { JustOneMethod(); };
protocol OnOpen { JustOneMethod(); };
protocol Operator { JustOneMethod(); };
protocol Option { JustOneMethod(); };
protocol Or { JustOneMethod(); };
protocol OrEq { JustOneMethod(); };
protocol Override { JustOneMethod(); };
protocol Package { JustOneMethod(); };
protocol Part { JustOneMethod(); };
protocol Priv { JustOneMethod(); };
protocol Private { JustOneMethod(); };
protocol Proc { JustOneMethod(); };
protocol Protected { JustOneMethod(); };
protocol Proxy { JustOneMethod(); };
protocol Pub { JustOneMethod(); };
protocol Public { JustOneMethod(); };
protocol Pure { JustOneMethod(); };
protocol Range { JustOneMethod(); };
protocol Ref { JustOneMethod(); };
protocol Register { JustOneMethod(); };
protocol ReinterpretCast { JustOneMethod(); };
protocol Requires { JustOneMethod(); };
protocol Result { JustOneMethod(); };
protocol Rethrow { JustOneMethod(); };
protocol Return { JustOneMethod(); };
protocol Rhs { JustOneMethod(); };
protocol Rune { JustOneMethod(); };
protocol RuntimeType { JustOneMethod(); };
protocol Select { JustOneMethod(); };
protocol Self { JustOneMethod(); };
protocol Send { JustOneMethod(); };
protocol Set { JustOneMethod(); };
protocol SetController { JustOneMethod(); };
protocol Short { JustOneMethod(); };
protocol Signed { JustOneMethod(); };
protocol Sizeof { JustOneMethod(); };
protocol Some { JustOneMethod(); };
protocol Static { JustOneMethod(); };
protocol StaticAssert { JustOneMethod(); };
protocol StaticCast { JustOneMethod(); };
protocol Stream { JustOneMethod(); };
protocol String { JustOneMethod(); };
protocol Struct { JustOneMethod(); };
protocol Stub { JustOneMethod(); };
protocol Super { JustOneMethod(); };
protocol Switch { JustOneMethod(); };
protocol Synchronized { JustOneMethod(); };
protocol Template { JustOneMethod(); };
protocol This { JustOneMethod(); };
protocol ThreadLocal { JustOneMethod(); };
protocol Throw { JustOneMethod(); };
protocol ToString { JustOneMethod(); };
protocol Trait { JustOneMethod(); };
protocol True { JustOneMethod(); };
protocol Try { JustOneMethod(); };
protocol Type { JustOneMethod(); };
protocol Typedef { JustOneMethod(); };
protocol Typeid { JustOneMethod(); };
protocol Typename { JustOneMethod(); };
protocol Typeof { JustOneMethod(); };
protocol Uint16 { JustOneMethod(); };
protocol Uint32 { JustOneMethod(); };
protocol Uint64 { JustOneMethod(); };
protocol Uint8 { JustOneMethod(); };
protocol Union { JustOneMethod(); };
protocol Unsafe { JustOneMethod(); };
protocol Unsigned { JustOneMethod(); };
protocol Unsized { JustOneMethod(); };
protocol Use { JustOneMethod(); };
protocol Using { JustOneMethod(); };
protocol Value { JustOneMethod(); };
protocol ValueOf { JustOneMethod(); };
protocol ValueUnion { JustOneMethod(); };
protocol ValuesMap { JustOneMethod(); };
protocol Var { JustOneMethod(); };
protocol Vec { JustOneMethod(); };
protocol Virtual { JustOneMethod(); };
protocol Void { JustOneMethod(); };
protocol Volatile { JustOneMethod(); };
protocol WcharT { JustOneMethod(); };
protocol Where { JustOneMethod(); };
protocol Which { JustOneMethod(); };
protocol While { JustOneMethod(); };
protocol With { JustOneMethod(); };
protocol Xor { JustOneMethod(); };
protocol XorEq { JustOneMethod(); };
protocol Xunion { JustOneMethod(); };
protocol Yield { JustOneMethod(); };
protocol Zx { JustOneMethod(); };
