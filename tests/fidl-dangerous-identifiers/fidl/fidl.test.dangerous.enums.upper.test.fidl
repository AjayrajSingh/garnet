// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.enums.upper;
enum ABSTRACT { MEMBER = 1; };
enum ALIGNAS { MEMBER = 1; };
enum ALIGNOF { MEMBER = 1; };
enum AND { MEMBER = 1; };
enum AND_EQ { MEMBER = 1; };
enum AS { MEMBER = 1; };
enum ASM { MEMBER = 1; };
enum ASSERT { MEMBER = 1; };
enum ASYNC { MEMBER = 1; };
enum ATOMIC_CANCEL { MEMBER = 1; };
enum ATOMIC_COMMIT { MEMBER = 1; };
enum ATOMIC_NOEXCEPT { MEMBER = 1; };
enum AUTO { MEMBER = 1; };
enum AWAIT { MEMBER = 1; };
enum BECOME { MEMBER = 1; };
enum BITAND { MEMBER = 1; };
enum BITOR { MEMBER = 1; };
enum BOOL { MEMBER = 1; };
enum BOX { MEMBER = 1; };
enum BREAK { MEMBER = 1; };
enum BYTE { MEMBER = 1; };
enum CASE { MEMBER = 1; };
enum CATCH { MEMBER = 1; };
enum CHAN { MEMBER = 1; };
enum CHAR { MEMBER = 1; };
enum CHAR16_T { MEMBER = 1; };
enum CHAR32_T { MEMBER = 1; };
enum CLASS { MEMBER = 1; };
enum CO_AWAIT { MEMBER = 1; };
enum CO_RETURN { MEMBER = 1; };
enum CO_YIELD { MEMBER = 1; };
enum CODING_TRAITS { MEMBER = 1; };
enum COMPL { MEMBER = 1; };
enum CONCEPT { MEMBER = 1; };
enum CONST { MEMBER = 1; };
enum CONST_CAST { MEMBER = 1; };
enum CONSTEXPR { MEMBER = 1; };
enum CONTINUE { MEMBER = 1; };
enum CONTROLLER { MEMBER = 1; };
enum COVARIANT { MEMBER = 1; };
enum CRATE { MEMBER = 1; };
enum DECLTYPE { MEMBER = 1; };
enum DECODER { MEMBER = 1; };
enum DEFAULT { MEMBER = 1; };
enum DEFER { MEMBER = 1; };
enum DEFERRED { MEMBER = 1; };
enum DELETE { MEMBER = 1; };
enum DO { MEMBER = 1; };
enum DOUBLE { MEMBER = 1; };
enum DYNAMIC { MEMBER = 1; };
enum DYNAMIC_CAST { MEMBER = 1; };
enum ELSE { MEMBER = 1; };
enum ENCODER { MEMBER = 1; };
enum ENSURE_VALUES_INSTANTIATED { MEMBER = 1; };
enum ENUM { MEMBER = 1; };
enum ERR { MEMBER = 1; };
enum EXPLICIT { MEMBER = 1; };
enum EXPORT { MEMBER = 1; };
enum EXTENDS { MEMBER = 1; };
enum EXTERN { MEMBER = 1; };
enum EXTERNAL { MEMBER = 1; };
enum FACTORY { MEMBER = 1; };
enum FALLTHROUGH { MEMBER = 1; };
enum FALSE { MEMBER = 1; };
enum FIDL { MEMBER = 1; };
enum FIDL_TYPE { MEMBER = 1; };
enum FINAL { MEMBER = 1; };
enum FINALLY { MEMBER = 1; };
enum FLOAT { MEMBER = 1; };
enum FN { MEMBER = 1; };
enum FOR { MEMBER = 1; };
enum FRIEND { MEMBER = 1; };
enum FUNC { MEMBER = 1; };
enum FUTURE { MEMBER = 1; };
enum FUTURES { MEMBER = 1; };
enum GET { MEMBER = 1; };
enum GO { MEMBER = 1; };
enum GOTO { MEMBER = 1; };
enum HAS_INVALID_TAG { MEMBER = 1; };
enum HASH_CODE { MEMBER = 1; };
enum IF { MEMBER = 1; };
enum IMPL { MEMBER = 1; };
enum IMPLEMENTS { MEMBER = 1; };
enum IMPORT { MEMBER = 1; };
enum IN { MEMBER = 1; };
enum INDEX { MEMBER = 1; };
enum INLINE { MEMBER = 1; };
enum INT { MEMBER = 1; };
enum INT16 { MEMBER = 1; };
enum INT32 { MEMBER = 1; };
enum INT64 { MEMBER = 1; };
enum INT8 { MEMBER = 1; };
enum INTERFACE { MEMBER = 1; };
enum IS { MEMBER = 1; };
enum LET { MEMBER = 1; };
enum LHS { MEMBER = 1; };
enum LIBRARY { MEMBER = 1; };
enum LIST { MEMBER = 1; };
enum LONG { MEMBER = 1; };
enum LOOP { MEMBER = 1; };
enum MACRO { MEMBER = 1; };
enum MAP { MEMBER = 1; };
enum MATCH { MEMBER = 1; };
enum MIXIN { MEMBER = 1; };
enum MOD { MEMBER = 1; };
enum MODULE { MEMBER = 1; };
enum MOVE { MEMBER = 1; };
enum MUT { MEMBER = 1; };
enum MUTABLE { MEMBER = 1; };
enum NAMESPACE { MEMBER = 1; };
enum NEVER { MEMBER = 1; };
enum NEW { MEMBER = 1; };
enum NO_SUCH_METHOD { MEMBER = 1; };
enum NOEXCEPT { MEMBER = 1; };
enum NONE { MEMBER = 1; };
enum NOT { MEMBER = 1; };
enum NOT_EQ { MEMBER = 1; };
enum NULL { MEMBER = 1; };
enum NULLPTR { MEMBER = 1; };
enum NUM { MEMBER = 1; };
enum OBJECT { MEMBER = 1; };
enum OFFSET { MEMBER = 1; };
enum OFFSETOF { MEMBER = 1; };
enum OK { MEMBER = 1; };
enum ON_OPEN { MEMBER = 1; };
enum OPERATOR { MEMBER = 1; };
enum OPTION { MEMBER = 1; };
enum OR { MEMBER = 1; };
enum OR_EQ { MEMBER = 1; };
enum OVERRIDE { MEMBER = 1; };
enum PACKAGE { MEMBER = 1; };
enum PART { MEMBER = 1; };
enum PRIV { MEMBER = 1; };
enum PRIVATE { MEMBER = 1; };
enum PROC { MEMBER = 1; };
enum PROTECTED { MEMBER = 1; };
enum PROXY { MEMBER = 1; };
enum PUB { MEMBER = 1; };
enum PUBLIC { MEMBER = 1; };
enum PURE { MEMBER = 1; };
enum RANGE { MEMBER = 1; };
enum REF { MEMBER = 1; };
enum REGISTER { MEMBER = 1; };
enum REINTERPRET_CAST { MEMBER = 1; };
enum REQUIRES { MEMBER = 1; };
enum RESULT { MEMBER = 1; };
enum RETHROW { MEMBER = 1; };
enum RETURN { MEMBER = 1; };
enum RHS { MEMBER = 1; };
enum RUNE { MEMBER = 1; };
enum RUNTIME_TYPE { MEMBER = 1; };
enum SELECT { MEMBER = 1; };
enum SELF { MEMBER = 1; };
enum SEND { MEMBER = 1; };
enum SET { MEMBER = 1; };
enum SET_CONTROLLER { MEMBER = 1; };
enum SHORT { MEMBER = 1; };
enum SIGNED { MEMBER = 1; };
enum SIZEOF { MEMBER = 1; };
enum SOME { MEMBER = 1; };
enum STATIC { MEMBER = 1; };
enum STATIC_ASSERT { MEMBER = 1; };
enum STATIC_CAST { MEMBER = 1; };
enum STREAM { MEMBER = 1; };
enum STRING { MEMBER = 1; };
enum STRUCT { MEMBER = 1; };
enum STUB { MEMBER = 1; };
enum SUPER { MEMBER = 1; };
enum SWITCH { MEMBER = 1; };
enum SYNCHRONIZED { MEMBER = 1; };
enum TEMPLATE { MEMBER = 1; };
enum THIS { MEMBER = 1; };
enum THREAD_LOCAL { MEMBER = 1; };
enum THROW { MEMBER = 1; };
enum TO_STRING { MEMBER = 1; };
enum TRAIT { MEMBER = 1; };
enum TRUE { MEMBER = 1; };
enum TRY { MEMBER = 1; };
enum TYPE { MEMBER = 1; };
enum TYPEDEF { MEMBER = 1; };
enum TYPEID { MEMBER = 1; };
enum TYPENAME { MEMBER = 1; };
enum TYPEOF { MEMBER = 1; };
enum UINT16 { MEMBER = 1; };
enum UINT32 { MEMBER = 1; };
enum UINT64 { MEMBER = 1; };
enum UINT8 { MEMBER = 1; };
enum UNION { MEMBER = 1; };
enum UNSAFE { MEMBER = 1; };
enum UNSIGNED { MEMBER = 1; };
enum UNSIZED { MEMBER = 1; };
enum USE { MEMBER = 1; };
enum USING { MEMBER = 1; };
enum VALUE { MEMBER = 1; };
enum VALUE_OF { MEMBER = 1; };
enum VALUE_UNION { MEMBER = 1; };
enum VALUES_MAP { MEMBER = 1; };
enum VAR { MEMBER = 1; };
enum VEC { MEMBER = 1; };
enum VIRTUAL { MEMBER = 1; };
enum VOID { MEMBER = 1; };
enum VOLATILE { MEMBER = 1; };
enum WCHAR_T { MEMBER = 1; };
enum WHERE { MEMBER = 1; };
enum WHICH { MEMBER = 1; };
enum WHILE { MEMBER = 1; };
enum WITH { MEMBER = 1; };
enum XOR { MEMBER = 1; };
enum XOR_EQ { MEMBER = 1; };
enum XUNION { MEMBER = 1; };
enum YIELD { MEMBER = 1; };
enum ZX { MEMBER = 1; };
enum DangerousMembers {
  ABSTRACT = 0;
  ALIGNAS = 1;
  ALIGNOF = 2;
  AND = 3;
  AND_EQ = 4;
  AS = 5;
  ASM = 6;
  ASSERT = 7;
  ASYNC = 8;
  ATOMIC_CANCEL = 9;
  ATOMIC_COMMIT = 10;
  ATOMIC_NOEXCEPT = 11;
  AUTO = 12;
  AWAIT = 13;
  BECOME = 14;
  BITAND = 15;
  BITOR = 16;
  BOOL = 17;
  BOX = 18;
  BREAK = 19;
  BYTE = 20;
  CASE = 21;
  CATCH = 22;
  CHAN = 23;
  CHAR = 24;
  CHAR16_T = 25;
  CHAR32_T = 26;
  CLASS = 27;
  CO_AWAIT = 28;
  CO_RETURN = 29;
  CO_YIELD = 30;
  CODING_TRAITS = 31;
  COMPL = 32;
  CONCEPT = 33;
  CONST = 34;
  CONST_CAST = 35;
  CONSTEXPR = 36;
  CONTINUE = 37;
  CONTROLLER = 38;
  COVARIANT = 39;
  CRATE = 40;
  DECLTYPE = 41;
  DECODER = 42;
  DEFAULT = 43;
  DEFER = 44;
  DEFERRED = 45;
  DELETE = 46;
  DO = 47;
  DOUBLE = 48;
  DYNAMIC = 49;
  DYNAMIC_CAST = 50;
  ELSE = 51;
  ENCODER = 52;
  ENSURE_VALUES_INSTANTIATED = 53;
  ENUM = 54;
  ERR = 55;
  EXPLICIT = 56;
  EXPORT = 57;
  EXTENDS = 58;
  EXTERN = 59;
  EXTERNAL = 60;
  FACTORY = 61;
  FALLTHROUGH = 62;
  FALSE = 63;
  FIDL = 64;
  FIDL_TYPE = 65;
  FINAL = 66;
  FINALLY = 67;
  FLOAT = 68;
  FN = 69;
  FOR = 70;
  FRIEND = 71;
  FUNC = 72;
  FUTURE = 73;
  FUTURES = 74;
  GET = 75;
  GO = 76;
  GOTO = 77;
  HAS_INVALID_TAG = 78;
  HASH_CODE = 79;
  IF = 80;
  IMPL = 81;
  IMPLEMENTS = 82;
  IMPORT = 83;
  IN = 84;
  INDEX = 85;
  INLINE = 86;
  INT = 87;
  INT16 = 88;
  INT32 = 89;
  INT64 = 90;
  INT8 = 91;
  INTERFACE = 92;
  IS = 93;
  LET = 94;
  LHS = 95;
  LIBRARY = 96;
  LIST = 97;
  LONG = 98;
  LOOP = 99;
  MACRO = 100;
  MAP = 101;
  MATCH = 102;
  MIXIN = 103;
  MOD = 104;
  MODULE = 105;
  MOVE = 106;
  MUT = 107;
  MUTABLE = 108;
  NAMESPACE = 109;
  NEVER = 110;
  NEW = 111;
  NO_SUCH_METHOD = 112;
  NOEXCEPT = 113;
  NONE = 114;
  NOT = 115;
  NOT_EQ = 116;
  NULL = 117;
  NULLPTR = 118;
  NUM = 119;
  OBJECT = 120;
  OFFSET = 121;
  OFFSETOF = 122;
  OK = 123;
  ON_OPEN = 124;
  OPERATOR = 125;
  OPTION = 126;
  OR = 127;
  OR_EQ = 128;
  OVERRIDE = 129;
  PACKAGE = 130;
  PART = 131;
  PRIV = 132;
  PRIVATE = 133;
  PROC = 134;
  PROTECTED = 135;
  PROXY = 136;
  PUB = 137;
  PUBLIC = 138;
  PURE = 139;
  RANGE = 140;
  REF = 141;
  REGISTER = 142;
  REINTERPRET_CAST = 143;
  REQUIRES = 144;
  RESULT = 145;
  RETHROW = 146;
  RETURN = 147;
  RHS = 148;
  RUNE = 149;
  RUNTIME_TYPE = 150;
  SELECT = 151;
  SELF = 152;
  SEND = 153;
  SET = 154;
  SET_CONTROLLER = 155;
  SHORT = 156;
  SIGNED = 157;
  SIZEOF = 158;
  SOME = 159;
  STATIC = 160;
  STATIC_ASSERT = 161;
  STATIC_CAST = 162;
  STREAM = 163;
  STRING = 164;
  STRUCT = 165;
  STUB = 166;
  SUPER = 167;
  SWITCH = 168;
  SYNCHRONIZED = 169;
  TEMPLATE = 170;
  THIS = 171;
  THREAD_LOCAL = 172;
  THROW = 173;
  TO_STRING = 174;
  TRAIT = 175;
  TRUE = 176;
  TRY = 177;
  TYPE = 178;
  TYPEDEF = 179;
  TYPEID = 180;
  TYPENAME = 181;
  TYPEOF = 182;
  UINT16 = 183;
  UINT32 = 184;
  UINT64 = 185;
  UINT8 = 186;
  UNION = 187;
  UNSAFE = 188;
  UNSIGNED = 189;
  UNSIZED = 190;
  USE = 191;
  USING = 192;
  VALUE = 193;
  VALUE_OF = 194;
  VALUE_UNION = 195;
  VALUES_MAP = 196;
  VAR = 197;
  VEC = 198;
  VIRTUAL = 199;
  VOID = 200;
  VOLATILE = 201;
  WCHAR_T = 202;
  WHERE = 203;
  WHICH = 204;
  WHILE = 205;
  WITH = 206;
  XOR = 207;
  XOR_EQ = 208;
  XUNION = 209;
  YIELD = 210;
  ZX = 211;
};
